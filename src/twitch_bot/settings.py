"""
Django settings for twitch_bot project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os 
from pathlib import Path
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key 


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "TRUE") == "TRUE"

APP_NAME = os.environ.get("FLY_APP_NAME", False)

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", 'localhost;127.0.0.1').split(';')

if APP_NAME:
    ALLOWED_HOSTS.append(f"{APP_NAME}.fly.dev")

SITE_ID = 1

CSRF_TRUSTED_ORIGINS = [ f"https://{domain}" for domain in ALLOWED_HOSTS]

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "after_response",
    "accounts",
    "billing",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.twitch",
    "channels",
    "main",
    "storages",
    "widget_tweaks"
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "twitch_bot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "twitch_bot.wsgi.application"
ASGI_APPLICATION = "twitch_bot.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ["DATABASE_NAME"],
            'USER': os.environ["DATABASE_USER"],
            'PASSWORD': os.environ["DATABASE_PASS"],
            'HOST': os.environ["DATABASE_HOST"],
            'PORT': os.environ["DATABASE_PORT"],
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "accounts.Broadcaster"
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

SOCIALACCOUNT_PROVIDERS = {
    'twitch': {
        'APP': {
            "client_id": os.environ.get("TWITCH_APP_CLIENT_ID", "empty"),
            "secret": os.environ.get("TWITCH_APP_CLIENT_SECRET", "empty"),
            "key": ""
        },
        'SCOPE': [
            'channel:read:subscriptions',
            'channel:read:redemptions',
            'bits:read'
        ]
    }
}

SOCIALACCOUNT_ONLY = True
SOCIALACCOUNT_STORE_TOKENS = True
ACCOUNT_EMAIL_VERIFICATION = 'none'

#BUILD REDIRECT URI OF PROVIDER WITH HTTPS
if not DEBUG:
    ACCOUNT_DEFAULT_HTTP_PROTOCOL='https'

LOGIN_REDIRECT_URL = "/dashboard/overview/"

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATICFILES_DIRS = [
    BASE_DIR / "static"
]


USE_S3 = os.environ.get("USE_S3", "FALSE") == "TRUE"

if USE_S3:
    #Digitalocean/AWS variables
    AWS_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"] #your-spaces-access-key
    AWS_SECRET_ACCESS_KEY = os.environ["AWS_SECRET_ACCESS_KEY"] #your spaces-secret-access-key
    AWS_STORAGE_BUCKET_NAME = os.environ["BUCKET_NAME"] #your storage bucket name 
    AWS_S3_ENDPOINT_URL = os.environ["AWS_ENDPOINT_URL_S3"]
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    
    #Static files settings
    STATIC_FILES_FOLDER = os.environ["STATIC_FILES_FOLDER"] #your-spaces-files-folder NOT END IN / 
    STATIC_URL = "https://{url}/{folder}/".format(url=AWS_S3_ENDPOINT_URL, folder=STATIC_FILES_FOLDER) #this must end in /

    #Media files settings
    MEDIA_FILES_FOLDER = os.environ["MEDIA_FILES_FOLDER"] #your-spaces-files-folder for public media NOT END IN / 
    MEDIA_URL = "https://{url}/{folder}/".format(url=AWS_S3_ENDPOINT_URL, folder=MEDIA_FILES_FOLDER) #this must end in /

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "location": MEDIA_FILES_FOLDER,
                "default_acl": "public-read",
                "file_overwrite": False
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "location": STATIC_FILES_FOLDER,
                "default_acl": "public-read"
            },
        }
    }


else:
    STATIC_URL = "static/"
    STATIC_ROOT = BASE_DIR.parent / "dev-cdn" / "static"
    
    MEDIA_URL = "media/"
    MEDIA_ROOT = BASE_DIR.parent / "dev-cdn" / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


#Twitch API settings 
TWITCH_APP_CLIENT_ID = os.environ.get("TWITCH_APP_CLIENT_ID", "")
TWITCH_APP_CLIENT_SECRET = os.environ.get("TWITCH_APP_CLIENT_SECRET", "")
TWITCH_REDIRECT_URI = os.environ.get("TWITCH_REDIRECT_URI", "")
TWITCH_WEBHOOK_SECRET = os.environ.get("TWITCH_WEBHOOK_SECRET", "")
TWITCH_WEBHOOK_CALLBACK = os.environ.get("TWITCH_WEBHOOK_CALLBACK", "")

#ELEVENLABS API SETTINGS
ELEVENLABS_API_KEY = os.environ.get("ELEVENLABS_API_KEY", "")
ELEVENLABS_SFX_ENDPOINT = os.environ.get("ELEVENLABS_SFX_ENDPOINT", "")

#LEMON API SETTINGS
LEMON_API_KEY = os.environ.get("LEMON_API_KEY", "")
LEMON_WEBHOOK_SECRET = os.environ.get("LEMON_WEBHOOK_SECRET", "")
LEMON_WEBHOOK_CALLBACK = os.environ.get("LEMON_WEBHOOK_CALLBACK", "")
LEMON_CUSTOMER_PORTAL_URL = os.environ.get("LEMON_CUSTOMER_PORTAL_URL", "")

#DJANGO CHANNELS GROUP SETTINGS 
USE_REDIS = os.environ.get("USE_REDIS", "FALSE") == "TRUE"

if USE_REDIS:
    
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [{
                    "address": os.environ["REDIS_URL"],
                    "ssl_cert_reqs": None,
                }]
            }
        }
    }

else:
    CHANNEL_LAYERS = {
        "default":{
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }



LOGGING = {
    'version': 1,
    "disable_existing_loggers": False,
    'loggers': {
        'django':{
            'handlers':['console'],
            'level':'INFO'
        }
    },
    'handlers': {
        'console': {
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'custom',
        }
    },
    'formatters': {
        'custom': {
            'format':  '{name} {asctime} {levelname} :: {message}',
            'style': '{',
            "datefmt": "%H:%M:%S",
        }
    }
    
}